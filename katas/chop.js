
let chop = (n, ls, idx=0, _) =>
	([[-1, _],
		[idx, n],
		[-1, [...ls].pop()]].find(([_, p]) => ls[+[]] === p) ||
	[chop(n, ...(mid = ~~(ls.length/2), sndp = n >= ls[mid],
		[ls.slice(...[[0, mid], [mid,]][+sndp]), idx + mid*sndp]))])[+[]];

// let chop=(s,e,d=0,i)=>([[-1,i],[d,s],[-1,[...e].pop()]].find(([s,d])=>e[+[]]===d)||[chop(s,...(mid=~~(e.length/2),sndp=s>=e[mid],[e.slice(...[[0,mid],[mid]][+sndp]),d+mid*sndp]))])[+[]]

let assert = require('assert');
let test = _ => [
	[-1, [3, []]],
	[-1, [3, [1]]],
	[0,  [1, [1]]],
	[0,  [1, [1, 3, 5]]],
	[1,  [3, [1, 3, 5]]],
	[2,  [5, [1, 3, 5]]],
	[-1, [0, [1, 3, 5]]],
	[-1, [2, [1, 3, 5]]],
	[-1, [4, [1, 3, 5]]],
	[-1, [6, [1, 3, 5]]],
	[0,  [1, [1, 3, 5, 7]]],
	[1,  [3, [1, 3, 5, 7]]],
	[2,  [5, [1, 3, 5, 7]]],
	[3,  [7, [1, 3, 5, 7]]],
	[-1, [0, [1, 3, 5, 7]]],
	[-1, [2, [1, 3, 5, 7]]],
	[-1, [4, [1, 3, 5, 7]]],
	[-1, [6, [1, 3, 5, 7]]],
	[-1, [8, [1, 3, 5, 7]]]
].forEach(t => {
	console.log(`${t[1][0]} @ ${t[0]} in ${t[1][1]}`);
	assert.equal(t[0], chop(...t[1]));
});

test();
